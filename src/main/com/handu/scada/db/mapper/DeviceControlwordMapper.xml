<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="main.com.handu.scada.db.mapper.DeviceControlwordMapper">
  <resultMap id="BaseResultMap" type="main.com.handu.scada.db.bean.DeviceControlword">
    <id column="deviceId" jdbcType="VARCHAR" property="deviceid" />
    <result column="flagAllAlarm" jdbcType="BIT" property="flagallalarm" />
    <result column="flagLightAlarm" jdbcType="BIT" property="flaglightalarm" />
    <result column="flagAudioAlarm" jdbcType="BIT" property="flagaudioalarm" />
    <result column="flagTimelyTrial" jdbcType="BIT" property="flagtimelytrial" />
    <result column="flagLevelReturn" jdbcType="BIT" property="flaglevelreturn" />
    <result column="flagReclosing" jdbcType="BIT" property="flagreclosing" />
    <result column="flagUnderVoltageAlarm" jdbcType="BIT" property="flagundervoltagealarm" />
    <result column="flagUnderVoltageControl" jdbcType="BIT" property="flagundervoltagecontrol" />
    <result column="flagOverVoltageAlarm" jdbcType="BIT" property="flagovervoltagealarm" />
    <result column="flagOverVoltageControl" jdbcType="BIT" property="flagovervoltagecontrol" />
    <result column="flagMissPhaseAlarm" jdbcType="BIT" property="flagmissphasealarm" />
    <result column="flagMissPhaseControl" jdbcType="BIT" property="flagmissphasecontrol" />
    <result column="flagOverCurrentAlarm" jdbcType="BIT" property="flagovercurrentalarm" />
    <result column="flagOverCurrentControl" jdbcType="BIT" property="flagovercurrentcontrol" />
    <result column="flagTrialSource" jdbcType="BIT" property="flagtrialsource" />
    <result column="flagMissEarthLineAlarm" jdbcType="BIT" property="flagmissearthlinealarm" />
    <result column="flagMissEarthLineControl" jdbcType="BIT" property="flagmissearthlinecontrol" />
    <result column="residualThresholdLevel" jdbcType="INTEGER" property="residualthresholdlevel" />
    <result column="delayTimeLevel" jdbcType="INTEGER" property="delaytimelevel" />
    <result column="residualAlarmTimeLevel" jdbcType="INTEGER" property="residualalarmtimelevel" />
    <result column="recordtime" jdbcType="TIMESTAMP" property="recordtime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    deviceId, flagAllAlarm, flagLightAlarm, flagAudioAlarm, flagTimelyTrial, flagLevelReturn,
    flagReclosing, flagUnderVoltageAlarm, flagUnderVoltageControl, flagOverVoltageAlarm, 
    flagOverVoltageControl, flagMissPhaseAlarm, flagMissPhaseControl, flagOverCurrentAlarm, 
    flagOverCurrentControl, flagTrialSource, flagMissEarthLineAlarm, flagMissEarthLineControl, 
    residualThresholdLevel, delayTimeLevel, residualAlarmTimeLevel, recordtime
  </sql>
  <select id="selectByExample" parameterType="main.com.handu.scada.db.bean.DeviceControlwordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from device_controlword
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from device_controlword
    where deviceId = #{deviceid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from device_controlword
    where deviceId = #{deviceid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="main.com.handu.scada.db.bean.DeviceControlwordExample">
    delete from device_controlword
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="main.com.handu.scada.db.bean.DeviceControlword">
    insert into device_controlword (deviceId, flagAllAlarm, flagLightAlarm,
      flagAudioAlarm, flagTimelyTrial, flagLevelReturn, 
      flagReclosing, flagUnderVoltageAlarm, flagUnderVoltageControl, 
      flagOverVoltageAlarm, flagOverVoltageControl, flagMissPhaseAlarm, 
      flagMissPhaseControl, flagOverCurrentAlarm, flagOverCurrentControl, 
      flagTrialSource, flagMissEarthLineAlarm, flagMissEarthLineControl, 
      residualThresholdLevel, delayTimeLevel, 
      residualAlarmTimeLevel, recordtime)
    values (#{deviceid,jdbcType=VARCHAR}, #{flagallalarm,jdbcType=BIT}, #{flaglightalarm,jdbcType=BIT}, 
      #{flagaudioalarm,jdbcType=BIT}, #{flagtimelytrial,jdbcType=BIT}, #{flaglevelreturn,jdbcType=BIT}, 
      #{flagreclosing,jdbcType=BIT}, #{flagundervoltagealarm,jdbcType=BIT}, #{flagundervoltagecontrol,jdbcType=BIT}, 
      #{flagovervoltagealarm,jdbcType=BIT}, #{flagovervoltagecontrol,jdbcType=BIT}, #{flagmissphasealarm,jdbcType=BIT}, 
      #{flagmissphasecontrol,jdbcType=BIT}, #{flagovercurrentalarm,jdbcType=BIT}, #{flagovercurrentcontrol,jdbcType=BIT}, 
      #{flagtrialsource,jdbcType=BIT}, #{flagmissearthlinealarm,jdbcType=BIT}, #{flagmissearthlinecontrol,jdbcType=BIT}, 
      #{residualthresholdlevel,jdbcType=INTEGER}, #{delaytimelevel,jdbcType=INTEGER}, 
      #{residualalarmtimelevel,jdbcType=INTEGER}, #{recordtime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="main.com.handu.scada.db.bean.DeviceControlword">
    insert into device_controlword
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="deviceid != null">
        deviceId,
      </if>
      <if test="flagallalarm != null">
        flagAllAlarm,
      </if>
      <if test="flaglightalarm != null">
        flagLightAlarm,
      </if>
      <if test="flagaudioalarm != null">
        flagAudioAlarm,
      </if>
      <if test="flagtimelytrial != null">
        flagTimelyTrial,
      </if>
      <if test="flaglevelreturn != null">
        flagLevelReturn,
      </if>
      <if test="flagreclosing != null">
        flagReclosing,
      </if>
      <if test="flagundervoltagealarm != null">
        flagUnderVoltageAlarm,
      </if>
      <if test="flagundervoltagecontrol != null">
        flagUnderVoltageControl,
      </if>
      <if test="flagovervoltagealarm != null">
        flagOverVoltageAlarm,
      </if>
      <if test="flagovervoltagecontrol != null">
        flagOverVoltageControl,
      </if>
      <if test="flagmissphasealarm != null">
        flagMissPhaseAlarm,
      </if>
      <if test="flagmissphasecontrol != null">
        flagMissPhaseControl,
      </if>
      <if test="flagovercurrentalarm != null">
        flagOverCurrentAlarm,
      </if>
      <if test="flagovercurrentcontrol != null">
        flagOverCurrentControl,
      </if>
      <if test="flagtrialsource != null">
        flagTrialSource,
      </if>
      <if test="flagmissearthlinealarm != null">
        flagMissEarthLineAlarm,
      </if>
      <if test="flagmissearthlinecontrol != null">
        flagMissEarthLineControl,
      </if>
      <if test="residualthresholdlevel != null">
        residualThresholdLevel,
      </if>
      <if test="delaytimelevel != null">
        delayTimeLevel,
      </if>
      <if test="residualalarmtimelevel != null">
        residualAlarmTimeLevel,
      </if>
      <if test="recordtime != null">
        recordtime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="deviceid != null">
        #{deviceid,jdbcType=VARCHAR},
      </if>
      <if test="flagallalarm != null">
        #{flagallalarm,jdbcType=BIT},
      </if>
      <if test="flaglightalarm != null">
        #{flaglightalarm,jdbcType=BIT},
      </if>
      <if test="flagaudioalarm != null">
        #{flagaudioalarm,jdbcType=BIT},
      </if>
      <if test="flagtimelytrial != null">
        #{flagtimelytrial,jdbcType=BIT},
      </if>
      <if test="flaglevelreturn != null">
        #{flaglevelreturn,jdbcType=BIT},
      </if>
      <if test="flagreclosing != null">
        #{flagreclosing,jdbcType=BIT},
      </if>
      <if test="flagundervoltagealarm != null">
        #{flagundervoltagealarm,jdbcType=BIT},
      </if>
      <if test="flagundervoltagecontrol != null">
        #{flagundervoltagecontrol,jdbcType=BIT},
      </if>
      <if test="flagovervoltagealarm != null">
        #{flagovervoltagealarm,jdbcType=BIT},
      </if>
      <if test="flagovervoltagecontrol != null">
        #{flagovervoltagecontrol,jdbcType=BIT},
      </if>
      <if test="flagmissphasealarm != null">
        #{flagmissphasealarm,jdbcType=BIT},
      </if>
      <if test="flagmissphasecontrol != null">
        #{flagmissphasecontrol,jdbcType=BIT},
      </if>
      <if test="flagovercurrentalarm != null">
        #{flagovercurrentalarm,jdbcType=BIT},
      </if>
      <if test="flagovercurrentcontrol != null">
        #{flagovercurrentcontrol,jdbcType=BIT},
      </if>
      <if test="flagtrialsource != null">
        #{flagtrialsource,jdbcType=BIT},
      </if>
      <if test="flagmissearthlinealarm != null">
        #{flagmissearthlinealarm,jdbcType=BIT},
      </if>
      <if test="flagmissearthlinecontrol != null">
        #{flagmissearthlinecontrol,jdbcType=BIT},
      </if>
      <if test="residualthresholdlevel != null">
        #{residualthresholdlevel,jdbcType=INTEGER},
      </if>
      <if test="delaytimelevel != null">
        #{delaytimelevel,jdbcType=INTEGER},
      </if>
      <if test="residualalarmtimelevel != null">
        #{residualalarmtimelevel,jdbcType=INTEGER},
      </if>
      <if test="recordtime != null">
        #{recordtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="main.com.handu.scada.db.bean.DeviceControlwordExample" resultType="java.lang.Long">
    select count(*) from device_controlword
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update device_controlword
    <set>
      <if test="tripEventRecord.deviceid != null">
        deviceId = #{tripEventRecord.deviceid,jdbcType=VARCHAR},
      </if>
      <if test="tripEventRecord.flagallalarm != null">
        flagAllAlarm = #{tripEventRecord.flagallalarm,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flaglightalarm != null">
        flagLightAlarm = #{tripEventRecord.flaglightalarm,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flagaudioalarm != null">
        flagAudioAlarm = #{tripEventRecord.flagaudioalarm,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flagtimelytrial != null">
        flagTimelyTrial = #{tripEventRecord.flagtimelytrial,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flaglevelreturn != null">
        flagLevelReturn = #{tripEventRecord.flaglevelreturn,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flagreclosing != null">
        flagReclosing = #{tripEventRecord.flagreclosing,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flagundervoltagealarm != null">
        flagUnderVoltageAlarm = #{tripEventRecord.flagundervoltagealarm,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flagundervoltagecontrol != null">
        flagUnderVoltageControl = #{tripEventRecord.flagundervoltagecontrol,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flagovervoltagealarm != null">
        flagOverVoltageAlarm = #{tripEventRecord.flagovervoltagealarm,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flagovervoltagecontrol != null">
        flagOverVoltageControl = #{tripEventRecord.flagovervoltagecontrol,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flagmissphasealarm != null">
        flagMissPhaseAlarm = #{tripEventRecord.flagmissphasealarm,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flagmissphasecontrol != null">
        flagMissPhaseControl = #{tripEventRecord.flagmissphasecontrol,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flagovercurrentalarm != null">
        flagOverCurrentAlarm = #{tripEventRecord.flagovercurrentalarm,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flagovercurrentcontrol != null">
        flagOverCurrentControl = #{tripEventRecord.flagovercurrentcontrol,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flagtrialsource != null">
        flagTrialSource = #{tripEventRecord.flagtrialsource,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flagmissearthlinealarm != null">
        flagMissEarthLineAlarm = #{tripEventRecord.flagmissearthlinealarm,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.flagmissearthlinecontrol != null">
        flagMissEarthLineControl = #{tripEventRecord.flagmissearthlinecontrol,jdbcType=BIT},
      </if>
      <if test="tripEventRecord.residualthresholdlevel != null">
        residualThresholdLevel = #{tripEventRecord.residualthresholdlevel,jdbcType=INTEGER},
      </if>
      <if test="tripEventRecord.delaytimelevel != null">
        delayTimeLevel = #{tripEventRecord.delaytimelevel,jdbcType=INTEGER},
      </if>
      <if test="tripEventRecord.residualalarmtimelevel != null">
        residualAlarmTimeLevel = #{tripEventRecord.residualalarmtimelevel,jdbcType=INTEGER},
      </if>
      <if test="tripEventRecord.recordtime != null">
        recordtime = #{tripEventRecord.recordtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update device_controlword
    set deviceId = #{tripEventRecord.deviceid,jdbcType=VARCHAR},
      flagAllAlarm = #{tripEventRecord.flagallalarm,jdbcType=BIT},
      flagLightAlarm = #{tripEventRecord.flaglightalarm,jdbcType=BIT},
      flagAudioAlarm = #{tripEventRecord.flagaudioalarm,jdbcType=BIT},
      flagTimelyTrial = #{tripEventRecord.flagtimelytrial,jdbcType=BIT},
      flagLevelReturn = #{tripEventRecord.flaglevelreturn,jdbcType=BIT},
      flagReclosing = #{tripEventRecord.flagreclosing,jdbcType=BIT},
      flagUnderVoltageAlarm = #{tripEventRecord.flagundervoltagealarm,jdbcType=BIT},
      flagUnderVoltageControl = #{tripEventRecord.flagundervoltagecontrol,jdbcType=BIT},
      flagOverVoltageAlarm = #{tripEventRecord.flagovervoltagealarm,jdbcType=BIT},
      flagOverVoltageControl = #{tripEventRecord.flagovervoltagecontrol,jdbcType=BIT},
      flagMissPhaseAlarm = #{tripEventRecord.flagmissphasealarm,jdbcType=BIT},
      flagMissPhaseControl = #{tripEventRecord.flagmissphasecontrol,jdbcType=BIT},
      flagOverCurrentAlarm = #{tripEventRecord.flagovercurrentalarm,jdbcType=BIT},
      flagOverCurrentControl = #{tripEventRecord.flagovercurrentcontrol,jdbcType=BIT},
      flagTrialSource = #{tripEventRecord.flagtrialsource,jdbcType=BIT},
      flagMissEarthLineAlarm = #{tripEventRecord.flagmissearthlinealarm,jdbcType=BIT},
      flagMissEarthLineControl = #{tripEventRecord.flagmissearthlinecontrol,jdbcType=BIT},
      residualThresholdLevel = #{tripEventRecord.residualthresholdlevel,jdbcType=INTEGER},
      delayTimeLevel = #{tripEventRecord.delaytimelevel,jdbcType=INTEGER},
      residualAlarmTimeLevel = #{tripEventRecord.residualalarmtimelevel,jdbcType=INTEGER},
      recordtime = #{tripEventRecord.recordtime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="main.com.handu.scada.db.bean.DeviceControlword">
    update device_controlword
    <set>
      <if test="flagallalarm != null">
        flagAllAlarm = #{flagallalarm,jdbcType=BIT},
      </if>
      <if test="flaglightalarm != null">
        flagLightAlarm = #{flaglightalarm,jdbcType=BIT},
      </if>
      <if test="flagaudioalarm != null">
        flagAudioAlarm = #{flagaudioalarm,jdbcType=BIT},
      </if>
      <if test="flagtimelytrial != null">
        flagTimelyTrial = #{flagtimelytrial,jdbcType=BIT},
      </if>
      <if test="flaglevelreturn != null">
        flagLevelReturn = #{flaglevelreturn,jdbcType=BIT},
      </if>
      <if test="flagreclosing != null">
        flagReclosing = #{flagreclosing,jdbcType=BIT},
      </if>
      <if test="flagundervoltagealarm != null">
        flagUnderVoltageAlarm = #{flagundervoltagealarm,jdbcType=BIT},
      </if>
      <if test="flagundervoltagecontrol != null">
        flagUnderVoltageControl = #{flagundervoltagecontrol,jdbcType=BIT},
      </if>
      <if test="flagovervoltagealarm != null">
        flagOverVoltageAlarm = #{flagovervoltagealarm,jdbcType=BIT},
      </if>
      <if test="flagovervoltagecontrol != null">
        flagOverVoltageControl = #{flagovervoltagecontrol,jdbcType=BIT},
      </if>
      <if test="flagmissphasealarm != null">
        flagMissPhaseAlarm = #{flagmissphasealarm,jdbcType=BIT},
      </if>
      <if test="flagmissphasecontrol != null">
        flagMissPhaseControl = #{flagmissphasecontrol,jdbcType=BIT},
      </if>
      <if test="flagovercurrentalarm != null">
        flagOverCurrentAlarm = #{flagovercurrentalarm,jdbcType=BIT},
      </if>
      <if test="flagovercurrentcontrol != null">
        flagOverCurrentControl = #{flagovercurrentcontrol,jdbcType=BIT},
      </if>
      <if test="flagtrialsource != null">
        flagTrialSource = #{flagtrialsource,jdbcType=BIT},
      </if>
      <if test="flagmissearthlinealarm != null">
        flagMissEarthLineAlarm = #{flagmissearthlinealarm,jdbcType=BIT},
      </if>
      <if test="flagmissearthlinecontrol != null">
        flagMissEarthLineControl = #{flagmissearthlinecontrol,jdbcType=BIT},
      </if>
      <if test="residualthresholdlevel != null">
        residualThresholdLevel = #{residualthresholdlevel,jdbcType=INTEGER},
      </if>
      <if test="delaytimelevel != null">
        delayTimeLevel = #{delaytimelevel,jdbcType=INTEGER},
      </if>
      <if test="residualalarmtimelevel != null">
        residualAlarmTimeLevel = #{residualalarmtimelevel,jdbcType=INTEGER},
      </if>
      <if test="recordtime != null">
        recordtime = #{recordtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where deviceId = #{deviceid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="main.com.handu.scada.db.bean.DeviceControlword">
    update device_controlword
    set flagAllAlarm = #{flagallalarm,jdbcType=BIT},
      flagLightAlarm = #{flaglightalarm,jdbcType=BIT},
      flagAudioAlarm = #{flagaudioalarm,jdbcType=BIT},
      flagTimelyTrial = #{flagtimelytrial,jdbcType=BIT},
      flagLevelReturn = #{flaglevelreturn,jdbcType=BIT},
      flagReclosing = #{flagreclosing,jdbcType=BIT},
      flagUnderVoltageAlarm = #{flagundervoltagealarm,jdbcType=BIT},
      flagUnderVoltageControl = #{flagundervoltagecontrol,jdbcType=BIT},
      flagOverVoltageAlarm = #{flagovervoltagealarm,jdbcType=BIT},
      flagOverVoltageControl = #{flagovervoltagecontrol,jdbcType=BIT},
      flagMissPhaseAlarm = #{flagmissphasealarm,jdbcType=BIT},
      flagMissPhaseControl = #{flagmissphasecontrol,jdbcType=BIT},
      flagOverCurrentAlarm = #{flagovercurrentalarm,jdbcType=BIT},
      flagOverCurrentControl = #{flagovercurrentcontrol,jdbcType=BIT},
      flagTrialSource = #{flagtrialsource,jdbcType=BIT},
      flagMissEarthLineAlarm = #{flagmissearthlinealarm,jdbcType=BIT},
      flagMissEarthLineControl = #{flagmissearthlinecontrol,jdbcType=BIT},
      residualThresholdLevel = #{residualthresholdlevel,jdbcType=INTEGER},
      delayTimeLevel = #{delaytimelevel,jdbcType=INTEGER},
      residualAlarmTimeLevel = #{residualalarmtimelevel,jdbcType=INTEGER},
      recordtime = #{recordtime,jdbcType=TIMESTAMP}
    where deviceId = #{deviceid,jdbcType=VARCHAR}
  </update>
</mapper>